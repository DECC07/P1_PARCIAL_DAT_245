# -*- coding: utf-8 -*-
"""p2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sDEb8MRngvyfZPmOoxItnf23ZU63V4Zg

# **2.      Selección un datatset tabular de al menos 14 columnas, 1000 filas. Si elige imágenes igualmente puede convertir la imagen en datos tabulares de NxM. De esta selección indique cual es la clase o si no tiene.**
"""

from google.colab import drive
drive.mount("/content/Drive")

import pandas as pd
df = pd.read_csv("/content/Drive/MyDrive/inteligenciaartificial/PrimerParcial/p2/hipertension.csv")
print(df)

"""# **a.       Sin el uso de librerías en Python programe el percentil y cuartil de cada columna. Que distribución se puede aplicar en su caso normal, Bernoulli, gaussiana, poisson, otros. Indique la razón de su uso graficando con matplotlib.**

"""

import csv

# Función para calcular percentil
def calcular_percentil(datos, percentil):
    datos_ordenados = sorted(datos)
    k = (len(datos_ordenados) - 1) * (percentil / 100)
    f = int(k)
    c = k - f
    if f + 1 < len(datos_ordenados):
        return datos_ordenados[f] + (c * (datos_ordenados[f + 1] - datos_ordenados[f]))
    else:
        return datos_ordenados[f]

# Función para calcular cuartiles
def calcular_cuartiles(datos):
    Q1 = calcular_percentil(datos, 25)
    Q2 = calcular_percentil(datos, 50)
    Q3 = calcular_percentil(datos, 75)
    return Q1, Q2, Q3

# Función para calcular percentiles y cuartiles para cada columna
def calcular_percentiles_y_cuartiles(df):
    resultados = {}
    for columna in df[0].keys():
        datos = [float(fila[columna]) for fila in df if fila[columna] != '']
        Q1, Q2, Q3 = calcular_cuartiles(datos)
        percentiles = {p: calcular_percentil(datos, p) for p in [10, 25, 50, 75, 90]}
        resultados[columna] = {
            'Q1': Q1,
            'Q2': Q2,
            'Q3': Q3,
            'Percentiles': percentiles
        }
    return resultados

# Leer el archivo CSV
with open("/content/Drive/MyDrive/inteligenciaartificial/PrimerParcial/p2/hipertension.csv", newline='') as csvfile:
    df = list(csv.DictReader(csvfile))

# Calcular percentiles y cuartiles
resultados = calcular_percentiles_y_cuartiles(df)

# Imprimir resultados
for columna, valores in resultados.items():
    print(f"Columna: {columna}")
    print(f"Q1: {valores['Q1']}, Q2: {valores['Q2']}, Q3: {valores['Q3']}")
    print(f"Percentiles: {valores['Percentiles']}")

# Graficar con matplotlib
import matplotlib.pyplot as plt

# Ejemplo de datos para graficar
import random
datos = [random.gauss(0, 1) for _ in range(1000)]  # Datos con distribución normal

# Histograma
plt.hist(datos, bins=30, alpha=0.7, color='blue')
plt.title('Distribución Normal')
plt.xlabel('Valor')
plt.ylabel('Frecuencia')
plt.show()

"""# **b.      De al menos tres columnas seleccionadas por usted indique que datos son relevantes de estas, grafique la misma (puede ser dispersión o mapa de calor, otros), indique al menos 4 características por columna seleccionada.**"""

import csv
import matplotlib.pyplot as plt

# Función para calcular percentil
def calcular_percentil(datos, percentil):
    datos_ordenados = sorted(datos)
    k = (len(datos_ordenados) - 1) * (percentil / 100)
    f = int(k)
    c = k - f
    if f + 1 < len(datos_ordenados):
        return datos_ordenados[f] + (c * (datos_ordenados[f + 1] - datos_ordenados[f]))
    else:
        return datos_ordenados[f]

# Función para calcular cuartiles
def calcular_cuartiles(datos):
    Q1 = calcular_percentil(datos, 25)
    Q2 = calcular_percentil(datos, 50)
    Q3 = calcular_percentil(datos, 75)
    return Q1, Q2, Q3

# Función para calcular percentiles y cuartiles para cada columna
def calcular_percentiles_y_cuartiles(df):
    resultados = {}
    for columna in df[0].keys():
        datos = [float(fila[columna]) for fila in df if fila[columna] != '']
        Q1, Q2, Q3 = calcular_cuartiles(datos)
        percentiles = {p: calcular_percentil(datos, p) for p in [10, 25, 50, 75, 90]}
        resultados[columna] = {
            'Q1': Q1,
            'Q2': Q2,
            'Q3': Q3,
            'Percentiles': percentiles
        }
    return resultados

# Leer el archivo CSV
with open("/content/Drive/MyDrive/inteligenciaartificial/PrimerParcial/p2/hipertension.csv", newline='') as csvfile:
    df = list(csv.DictReader(csvfile))

# Calcular percentiles y cuartiles
resultados = calcular_percentiles_y_cuartiles(df)

# Imprimir resultados
print(f"Columna: {columnas_seleccionadas}")
#for columna, valores in resultados.items():
    #print(f"Columna: {columnas_seleccionadas}")
    #print(f"Q1: {valores['Q1']}, Q2: {valores['Q2']}, Q3: {valores['Q3']}")
    #print(f"Percentiles: {valores['Percentiles']}")

# Valores normales para cada columna
valores_normales = {
    'edad': 47,  # años
    'tension_arterial': 120,  # mmHg
    'valor_trigliceridos': 150  # mg/dL
}

# Selección de columnas
columnas_seleccionadas = ['edad', 'tension_arterial', 'valor_trigliceridos']

# Graficar cuartiles y percentiles para las columnas seleccionadas
for columna in columnas_seleccionadas:
    valores = resultados[columna]

    # Graficar percentiles
    percentiles = list(valores['Percentiles'].values())
    plt.figure()
    plt.plot([10, 25, 50, 75, 90], percentiles, marker='o', label='Percentiles')
    plt.axhline(y=valores_normales[columna], color='r', linestyle='--', label='Valor Normal')
    plt.title(f'Percentiles de {columna}')
    plt.xlabel('Percentil')
    plt.ylabel('Valor')
    plt.legend()
    plt.grid(True)
    plt.show()

# Graficar distribuciones
# Distribución Normal para Edad
datos_edad = [float(fila['edad']) for fila in df if fila['edad'] != '']
plt.hist(datos_edad, bins=30, alpha=0.7, color='blue')
plt.axvline(x=valores_normales['edad'], color='r', linestyle='--', label='Edad Promedio')
plt.title('Distribución Normal de Edad')
plt.xlabel('Edad')
plt.ylabel('Frecuencia')
plt.legend()
plt.show()

# Distribución Normal para Tensión Arterial
datos_tension = [float(fila['tension_arterial']) for fila in df if fila['tension_arterial'] != '']
plt.hist(datos_tension, bins=30, alpha=0.7, color='green')
plt.axvline(x=valores_normales['tension_arterial'], color='r', linestyle='--', label='Valor Normal')
plt.title('Distribución Normal de Tensión Arterial')
plt.xlabel('Tensión Arterial')
plt.ylabel('Frecuencia')
plt.legend()
plt.show()

# Distribución Normal para Valor de Triglicéridos
datos_trigliceridos = [float(fila['valor_trigliceridos']) for fila in df if fila['valor_trigliceridos'] != '']
plt.hist(datos_trigliceridos, bins=30, alpha=0.7, color='red')
plt.axvline(x=valores_normales['valor_trigliceridos'], color='r', linestyle='--', label='Valor Normal')
plt.title('Distribución Normal de Valor de Triglicéridos')
plt.xlabel('Valor de Triglicéridos')
plt.ylabel('Frecuencia')
plt.legend()
plt.show()

"""# **c.       Obteniendo la media, mediana, moda con el uso de librerías, grafique un diagrama de cajas-bigote de al menos 3 columnas. Explique el resultado.**"""

import csv
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# Función para calcular percentil
def calcular_percentil(datos, percentil):
    datos_ordenados = sorted(datos)
    k = (len(datos_ordenados) - 1) * (percentil / 100)
    f = int(k)
    c = k - f
    if f + 1 < len(datos_ordenados):
        return datos_ordenados[f] + (c * (datos_ordenados[f + 1] - datos_ordenados[f]))
    else:
        return datos_ordenados[f]

# Función para calcular cuartiles
def calcular_cuartiles(datos):
    Q1 = calcular_percentil(datos, 25)
    Q2 = calcular_percentil(datos, 50)
    Q3 = calcular_percentil(datos, 75)
    return Q1, Q2, Q3

# Función para calcular percentiles y cuartiles para cada columna
def calcular_percentiles_y_cuartiles(df):
    resultados = {}
    for columna in df[0].keys():
        datos = [float(fila[columna]) for fila in df if fila[columna] != '']
        Q1, Q2, Q3 = calcular_cuartiles(datos)
        percentiles = {p: calcular_percentil(datos, p) for p in [10, 25, 50, 75, 90]}
        resultados[columna] = {
            'Q1': Q1,
            'Q2': Q2,
            'Q3': Q3,
            'Percentiles': percentiles,
            'Media': np.mean(datos),
            'Mediana': np.median(datos),
            'Moda': stats.mode(datos),
            'Varianza': np.var(datos)
        }
    return resultados

# Leer el archivo CSV
with open("/content/Drive/MyDrive/inteligenciaartificial/PrimerParcial/p2/hipertension.csv", newline='') as csvfile:
    df = list(csv.DictReader(csvfile))

# Calcular percentiles, cuartiles, media, mediana, moda y varianza
resultados = calcular_percentiles_y_cuartiles(df)

# Imprimir resultados
for columna, valores in resultados.items():
    print(f"Columna: {columna}")
    print(f"Q1: {valores['Q1']}, Q2: {valores['Q2']}, Q3: {valores['Q3']}")
    print(f"Percentiles: {valores['Percentiles']}")
    print(f"Media: {valores['Media']}, Mediana: {valores['Mediana']}, Moda: {valores['Moda']}, Varianza: {valores['Varianza']}")

# Valores normales para cada columna
valores_normales = {
    'edad': 47,  # años
    'tension_arterial': 120,  # mmHg
    'valor_trigliceridos': 150  # mg/dL
}

# Selección de columnas
columnas_seleccionadas = ['edad', 'tension_arterial', 'valor_trigliceridos']

# Graficar media, mediana y varianza para las columnas seleccionadas
for columna in columnas_seleccionadas:
    valores = resultados[columna]
    datos = [float(fila[columna]) for fila in df if fila[columna] != '']

    plt.figure(figsize=(10, 6))
    plt.hist(datos, bins=30, alpha=0.7, label='Datos', color='blue')
    plt.axvline(x=valores['Media'], color='r', linestyle='--', label=f'Media: {valores["Media"]:.2f}')
    plt.axvline(x=valores['Mediana'], color='g', linestyle='--', label=f'Mediana: {valores["Mediana"]:.2f}')
    plt.axvline(x=valores_normales[columna], color='orange', linestyle='--', label=f'Valor Normal: {valores_normales[columna]}')
    plt.title(f'Distribución de {columna} con Media, Mediana y Varianza')
    plt.xlabel(columna)
    plt.ylabel('Frecuencia')
    plt.legend()
    plt.grid(True)
    plt.show()

    print(f"Varianza de {columna}: {valores['Varianza']:.2f}")

# Graficar boxplot para las columnas seleccionadas
datos_para_boxplot = []
for columna in columnas_seleccionadas:
    datos = [float(fila[columna]) for fila in df if fila[columna] != '']
    datos_para_boxplot.append(datos)

plt.figure(figsize=(10, 6))
plt.boxplot(datos_para_boxplot, labels=columnas_seleccionadas)
plt.title('Diagrama de Cajas y Bigotes')
plt.ylabel('Valor')
plt.grid(True)
plt.show()